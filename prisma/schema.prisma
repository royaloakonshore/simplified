generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "auth"]
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  firstName      String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  login          String?
  role           UserRole  @default(user)
  isAdmin        Boolean   @default(false)
  accounts       Account[]
  sessions       Session[]
  orders         Order[]
  invoices       Invoice[]

  @@schema("public")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@schema("public")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("public")
}

enum UserRole {
  admin
  user

  @@schema("public")
}

model Allowlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())

  @@schema("public")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@schema("public")
}

enum AddressType {
  billing
  shipping

  @@schema("public")
}

model Address {
  id            String      @id @default(cuid())
  customerId    String
  type          AddressType
  streetAddress String // Changed from street
  city          String
  postalCode    String
  countryCode   String // Changed from country
  customer      Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@schema("public")
}

model Customer {
  id                   String    @id @default(cuid())
  name                 String
  email                String?
  phone                String?
  vatId                String? // Y-tunnus in Finland
  ovtIdentifier        String? // Changed from ovtId 
  intermediatorAddress String? // Added for Finvoice
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  addresses            Address[]
  orders               Order[]
  invoices             Invoice[]

  @@schema("public")
}

enum MaterialType {
  raw_material
  manufactured

  @@schema("public")
}

model InventoryItem {
  id                String                 @id @default(cuid())
  companyId         String? // TODO: Add when multi-tenancy is implemented
  sku               String                 @unique
  name              String
  description       String?
  category          String?   // E.g., "Raw Material", "Finished Good"
  unitOfMeasure     String?   // E.g., "pcs", "kg", "m"
  costPrice         Decimal?  @db.Decimal(10, 2)
  salesPrice        Decimal   @db.Decimal(10, 2)
  materialType      MaterialType           @default(raw_material)
  minimumStockLevel Decimal                @default(0) @db.Decimal(10, 2)
  reorderLevel      Decimal?  @db.Decimal(10, 2)
  quantityOnHand    Decimal   @default(0) @db.Decimal(10, 2) // Calculated field
  supplierId        String?   // Link to a potential Supplier model (future)
  imageUrl          String?
  notes             String?
  showInPricelist   Boolean  @default(true) // New field for pricelist visibility
  qrIdentifier      String?   @unique // New field for QR code data
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  transactions      InventoryTransaction[]
  orderItems        OrderItem[]
  invoiceItems      InvoiceItem[]
  billOfMaterial    BillOfMaterial? // Relation to the BOM if this is a manufactured item
  bomsAsComponent   BillOfMaterialItem[]   @relation("RawMaterialComponent") // Where this item is used as a raw material

  @@index([name])
  @@index([category])
  // @@index([companyId]) // TODO: Add when multi-tenancy is implemented
  @@schema("public")
}

enum TransactionType {
  purchase
  sale
  adjustment

  @@schema("public")
}

model InventoryTransaction {
  id        String          @id @default(cuid())
  itemId    String
  quantity  Decimal         @db.Decimal(10, 2)
  type      TransactionType
  reference String? // Optional reference to order or invoice
  note      String?
  createdAt DateTime        @default(now())
  item      InventoryItem   @relation(fields: [itemId], references: [id])

  @@schema("public")
}

enum OrderStatus {
  draft
  confirmed
  in_production // Added for clarity, maps to production workflow
  shipped
  delivered // Added for clarity
  cancelled
  quote_sent // Added for quote lifecycle
  quote_accepted // Added for quote lifecycle
  quote_rejected // Added for quote lifecycle
  INVOICED // Added for orders that have been invoiced

  @@schema("public")
}

enum OrderType {
  quotation
  work_order

  @@schema("public")
}

enum InventoryMaterialType {
  raw_material
  manufactured

  @@schema("public")
}

model Order {
  id                      String        @id @default(cuid())
  companyId               String? // TODO: Add when multi-tenancy is implemented
  orderNumber             String        @unique
  customerId              String
  customer                Customer      @relation(fields: [customerId], references: [id])
  orderDate               DateTime      @default(now())
  deliveryDate            DateTime? // New field for planned delivery
  status                  OrderStatus   @default(draft)
  orderType               OrderType     @default(work_order)
  totalAmount             Decimal?      @db.Decimal(10, 2)
  notes                   String?
  qrIdentifier            String?       @unique // New field for QR code data
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  productionStep          String?       // Link to current step in a potential Kanban board
  userId                  String        // Link to the user who created the order
  user                    User          @relation(fields: [userId], references: [id])
  items                   OrderItem[]   // Added inverse relation for OrderItem
  invoices                Invoice[]     @relation("OrderToInvoices") // Added inverse relation for Invoice

  @@index([customerId])
  @@index([status])
  @@index([orderType])
  // @@index([companyId]) // TODO: Add when multi-tenancy is implemented
  @@schema("public")
}

model OrderItem {
  id                 String        @id @default(cuid())
  orderId            String
  inventoryItemId    String // Renamed from itemId to be explicit FK for inventoryItem relation
  quantity           Decimal       @db.Decimal(10, 2)
  unitPrice          Decimal       @db.Decimal(10, 2)
  discountAmount     Decimal?      @db.Decimal(10, 2)
  discountPercentage Decimal?      @db.Decimal(5, 2) // Renamed from discountPercent
  order              Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  inventoryItem      InventoryItem @relation(fields: [inventoryItemId], references: [id]) // Renamed relation from item

  @@map("order_items") // Explicitly map table name if default (OrderItem) is not desired
  @@schema("public")
}

enum InvoiceStatus {
  draft
  sent
  paid
  overdue
  cancelled
  credited

  @@schema("public")
}

model Invoice {
  id                String        @id @default(cuid())
  invoiceNumber     String        @unique // Should be sequential
  customerId        String
  orderId           String? // Optional link to an Order
  invoiceDate       DateTime      @default(now())
  dueDate           DateTime
  status            InvoiceStatus @default(draft)
  notes             String?
  vatReverseCharge  Boolean       @default(false)
  totalAmount       Decimal       @default(0) @db.Decimal(12, 2)
  totalVatAmount    Decimal       @default(0) @db.Decimal(12, 2)
  isCreditNote      Boolean       @default(false)
  originalInvoiceId String?       @unique // For credit notes, ID of the original invoice
  creditNoteId      String?       @unique // For original invoices, ID of the credit note that credits this one
  userId            String?       // Added: ID of the user who created/managed this invoice

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer Customer      @relation(fields: [customerId], references: [id])
  order    Order?        @relation("OrderToInvoices", fields: [orderId], references: [id]) // Corrected relation name
  user     User?         @relation(fields: [userId], references: [id]) // Added: Relation to User
  items    InvoiceItem[]
  payments Payment[]

  originalInvoice Invoice? @relation("CreditNoteToOriginal", fields: [originalInvoiceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  creditNote      Invoice? @relation("CreditNoteToOriginal") // Relation for the original invoice to its credit note

  @@index([customerId])
  @@index([orderId])
  @@index([originalInvoiceId]) // Index for faster lookups of credit notes
  @@schema("public")
}

model InvoiceItem {
  id                 String        @id @default(cuid())
  invoiceId          String
  inventoryItemId    String // Renamed from itemId
  description        String?
  quantity           Decimal       @db.Decimal(10, 2)
  unitPrice          Decimal       @db.Decimal(10, 2)
  vatRatePercent     Decimal       @db.Decimal(5, 2)
  discountAmount     Decimal?      @db.Decimal(10, 2)
  discountPercentage Decimal?      @db.Decimal(5, 2) // Renamed from discountPercent
  invoice            Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  inventoryItem      InventoryItem @relation(fields: [inventoryItemId], references: [id]) // Renamed relation from item

  @@map("invoice_items") // Explicitly map table name
  @@schema("public")
}

model Payment {
  id          String   @id @default(cuid())
  invoiceId   String
  amount      Decimal  @db.Decimal(10, 2)
  paymentDate DateTime @default(now())
  notes       String?
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])

  @@schema("public")
}

model Settings {
  id                      String  @id @default(cuid())
  companyName             String
  vatId                   String // Y-tunnus
  ovtId                   String? // OVT identifier
  streetAddress           String
  postalCode              String
  city                    String
  country                 String
  phone                   String?
  email                   String?
  bankName                String?
  bankAccountIban         String
  bankSwiftBic            String
  finvoiceIntermediator   String?
  finvoiceIntermediatorId String?

  @@schema("public")
}

model BillOfMaterial {
  id                 String               @id @default(cuid())
  name               String
  manufacturedItemId String               @unique // Link to the manufactured InventoryItem
  manufacturedItem   InventoryItem        @relation(fields: [manufacturedItemId], references: [id])
  manualLaborCost    Decimal              @default(0) @db.Decimal(10, 2)
  items              BillOfMaterialItem[] @relation("BOMComponents")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  // Remove incorrect relation to Invoice
  // Invoice            Invoice?               @relation(fields: [invoiceId], references: [id])
  // invoiceId          String?

  @@schema("public")
}

model BillOfMaterialItem {
  id                String         @id @default(cuid())
  billOfMaterialId  String
  billOfMaterial    BillOfMaterial @relation(name: "BOMComponents", fields: [billOfMaterialId], references: [id], onDelete: Cascade)
  rawMaterialItemId String // Link to the raw material InventoryItem
  rawMaterialItem   InventoryItem  @relation(name: "RawMaterialComponent", fields: [rawMaterialItemId], references: [id])
  quantity          Decimal        @db.Decimal(10, 2) // Quantity of this raw material needed
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@schema("public")
}

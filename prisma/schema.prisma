generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "auth"]
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  firstName      String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  login          String?
  role           UserRole  @default(user)
  isAdmin        Boolean   @default(false)
  accounts       Account[]
  sessions       Session[]
  orders         Order[]
  invoices       Invoice[]
  Company        Company?  @relation(fields: [companyId], references: [id])
  companyId      String?

  @@schema("public")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@schema("public")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("public")
}

enum UserRole {
  admin
  user

  @@schema("public")
}

model Allowlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())

  @@schema("public")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@schema("public")
}

enum AddressType {
  billing
  shipping

  @@schema("public")
}

model Address {
  id            String      @id @default(cuid())
  customerId    String
  type          AddressType
  streetAddress String // Changed from street
  city          String
  postalCode    String
  countryCode   String // Changed from country
  customer      Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@schema("public")
}

model Customer {
  id                   String    @id @default(cuid())
  name                 String
  email                String?
  phone                String?
  vatId                String? // Y-tunnus in Finland
  ovtIdentifier        String? // Changed from ovtId 
  intermediatorAddress String? // Added for Finvoice
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  addresses            Address[]
  orders               Order[]
  invoices             Invoice[]
  Company              Company?  @relation(fields: [companyId], references: [id])
  companyId            String?

  @@schema("public")
}

model InventoryItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sku                 String?            @unique
  name                String
  description         String?
  minimumStockLevel   Decimal            @default(0) @db.Decimal(10, 2)
  reorderLevel        Decimal?           @db.Decimal(10, 2)
  qrIdentifier        String?            @unique
  unitOfMeasure       String? // e.g., 'kpl', 'kg', 'm'
  costPrice           Decimal            @default(0)
  salesPrice          Decimal            @default(0)
  quantityOnHand      Decimal            @default(0) // For raw materials or pre-built manufactured goods
  defaultVatRatePercent Decimal?           @db.Decimal(5, 2) // Default VAT rate for this item
  showInPricelist     Boolean            @default(true)
  internalRemarks     String?
  supplierId          String?
  supplier            Supplier?          @relation(fields: [supplierId], references: [id])
  inventoryCategoryId String?
  inventoryCategory   InventoryCategory? @relation(fields: [inventoryCategoryId], references: [id])

  // New fields for BOM and ItemType
  itemType        ItemType             @default(RAW_MATERIAL)
  bom             BillOfMaterial?      @relation("ManufacturedItemBOM")
  componentInBOMs BillOfMaterialItem[] @relation("ComponentItemInBOMs")
  // End new fields

  orderItems            OrderItem[]
  invoiceItems          InvoiceItem[]
  inventoryTransactions InventoryTransaction[]

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([supplierId])
  @@index([inventoryCategoryId])
  @@schema("public")
}

enum TransactionType {
  purchase
  sale
  adjustment

  @@schema("public")
}

model InventoryTransaction {
  id        String          @id @default(cuid())
  itemId    String
  quantity  Decimal         @db.Decimal(10, 2)
  type      TransactionType
  reference String? // Optional reference to order or invoice
  note      String?
  createdAt DateTime        @default(now())
  item      InventoryItem   @relation(fields: [itemId], references: [id])

  @@schema("public")
}

enum OrderStatus {
  draft
  confirmed
  in_production // Added for clarity, maps to production workflow
  shipped
  delivered // Added for clarity
  cancelled
  quote_sent // Added for quote lifecycle
  quote_accepted // Added for quote lifecycle
  quote_rejected // Added for quote lifecycle
  INVOICED // Added for orders that have been invoiced

  @@schema("public")
}

enum OrderType {
  quotation
  work_order

  @@schema("public")
}

model Order {
  id             String      @id @default(cuid())
  companyId      String? // Comment removed
  orderNumber    String      @unique
  customerId     String
  customer       Customer    @relation(fields: [customerId], references: [id])
  orderDate      DateTime    @default(now())
  deliveryDate   DateTime?
  status         OrderStatus @default(draft)
  orderType      OrderType   @default(work_order)
  totalAmount    Decimal?    @db.Decimal(10, 2)
  notes          String?
  qrIdentifier   String?     @unique
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  productionStep String?
  userId         String
  user           User        @relation(fields: [userId], references: [id])
  items          OrderItem[]
  invoices       Invoice[]   @relation("OrderToInvoices")
  Company        Company?    @relation(fields: [companyId], references: [id])

  @@index([customerId])
  @@index([status])
  @@index([orderType])
  @@index([companyId]) // Index uncommented and comment removed
  @@schema("public")
}

model OrderItem {
  id                 String        @id @default(cuid())
  orderId            String
  inventoryItemId    String // Renamed from itemId to be explicit FK for inventoryItem relation
  quantity           Decimal       @db.Decimal(10, 2)
  unitPrice          Decimal       @db.Decimal(10, 2)
  discountAmount     Decimal?      @db.Decimal(10, 2)
  discountPercentage Decimal?      @db.Decimal(5, 2) // Renamed from discountPercent
  order              Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  inventoryItem      InventoryItem @relation(fields: [inventoryItemId], references: [id]) // Renamed relation from item

  @@map("order_items") // Explicitly map table name if default (OrderItem) is not desired
  @@schema("public")
}

enum InvoiceStatus {
  draft
  sent
  paid
  overdue
  cancelled
  credited

  @@schema("public")
}

model Invoice {
  id                String        @id @default(cuid())
  invoiceNumber     String        @unique // Should be sequential
  customerId        String
  orderId           String? // Optional link to an Order
  invoiceDate       DateTime      @default(now())
  dueDate           DateTime
  status            InvoiceStatus @default(draft)
  notes             String?
  vatReverseCharge  Boolean       @default(false)
  totalAmount       Decimal       @default(0) @db.Decimal(12, 2)
  totalVatAmount    Decimal       @default(0) @db.Decimal(12, 2)
  isCreditNote      Boolean       @default(false)
  originalInvoiceId String?       @unique // For credit notes, ID of the original invoice
  creditNoteId      String?       @unique // For original invoices, ID of the credit note that credits this one
  userId            String? // Added: ID of the user who created/managed this invoice

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer Customer      @relation(fields: [customerId], references: [id])
  order    Order?        @relation("OrderToInvoices", fields: [orderId], references: [id]) // Corrected relation name
  user     User?         @relation(fields: [userId], references: [id]) // Added: Relation to User
  items    InvoiceItem[]
  payments Payment[]

  originalInvoice Invoice? @relation("CreditNoteToOriginal", fields: [originalInvoiceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  creditNote      Invoice? @relation("CreditNoteToOriginal") // Relation for the original invoice to its credit note
  Company         Company? @relation(fields: [companyId], references: [id])
  companyId       String?

  @@index([customerId])
  @@index([orderId])
  @@index([originalInvoiceId]) // Index for faster lookups of credit notes
  @@schema("public")
}

model InvoiceItem {
  id                 String   @id @default(cuid())
  invoiceId          String
  inventoryItemId    String // Renamed from itemId
  description        String?
  quantity           Decimal  @db.Decimal(10, 2)
  unitPrice          Decimal  @db.Decimal(10, 2) // This is NET (VAT-exclusive)
  vatRatePercent     Decimal  @db.Decimal(5, 2)
  discountAmount     Decimal? @db.Decimal(10, 2)
  discountPercentage Decimal? @db.Decimal(5, 2) // Renamed from discountPercent

  // New fields for profitability tracking
  calculatedUnitCost   Decimal? @db.Decimal(10, 2) // Cost of the item at the time of sale (VAT-exclusive)
  calculatedUnitProfit Decimal? @db.Decimal(10, 2) // Profit per unit at the time of sale (VAT-exclusive)
  calculatedLineProfit Decimal? @db.Decimal(10, 2) // Total profit for this line at the time of sale (VAT-exclusive)
  // End new fields

  invoice       Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [id]) // Renamed relation from item

  @@map("invoice_items")
  @@schema("public")
}

model Payment {
  id          String   @id @default(cuid())
  invoiceId   String
  amount      Decimal  @db.Decimal(10, 2)
  paymentDate DateTime @default(now())
  notes       String?
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])

  @@schema("public")
}

model Settings {
  id String @id @default(cuid())
  // companyId               String  @unique // TODO: Add when multi-tenancy is implemented (needs to be @unique for findFirst/update logic in settings router or tied to user)

  companyName String // Was String, remains String (required by schema)
  vatId       String // Was String, remains String (required by schema)
  domicile    String // New, String (required by schema)

  streetAddress String // Was String, remains String (required by schema)
  postalCode    String // Was String, remains String (required by schema)
  city          String // Was String, remains String (required by schema)
  countryCode   String // Renamed from country, String (required by schema)
  countryName   String // New, String (required by schema)

  bankAccountIBAN String // Renamed from bankAccountIban, String (required by schema)
  bankAccountBIC  String // Renamed from bankSwiftBic, String (required by schema)

  // Optional fields from schema
  website                    String? // New, optional
  sellerIdentifier           String? // Renamed from ovtId, optional
  sellerIntermediatorAddress String? // Renamed from finvoiceIntermediator, optional
  bankName                   String? // Was String?, remains String? (optional)
  defaultInvoicePaymentTermsDays Int?    // Added field for default payment terms
  defaultVatRatePercent      Decimal? @db.Decimal(5, 2) // Added: Company-level default VAT rate

  // Fields to review/remove from old model if not in new schema:
  // phone                   String? // Not in settingsSchema, was optional
  // email                   String? // Not in settingsSchema, was optional
  // finvoiceIntermediatorId String? // Removed as sellerIntermediatorAddress should cover the OVT/identifier

  // For now, I will comment them out. If they are truly unused, they can be deleted later.
  phone String? @map("settings_phone") // Keep but map to avoid breaking old data if any, or remove if unused
  email String? @map("settings_email") // Keep but map, or remove if unused
  // finvoiceIntermediatorId String? // Removed as sellerIntermediatorAddress should cover the OVT/identifier

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("public")
}

model BillOfMaterial {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name                String  @unique
  description         String?
  manualLaborCost     Decimal @default(0)
  totalCalculatedCost Decimal @default(0) // To be updated by application logic

  manufacturedItemId String               @unique
  manufacturedItem   InventoryItem        @relation("ManufacturedItemBOM", fields: [manufacturedItemId], references: [id], onDelete: Cascade)
  items              BillOfMaterialItem[]

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@schema("public")
}

model BillOfMaterialItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quantity Decimal

  billOfMaterialId String
  billOfMaterial   BillOfMaterial @relation(fields: [billOfMaterialId], references: [id], onDelete: Cascade)

  componentItemId String
  componentItem   InventoryItem @relation("ComponentItemInBOMs", fields: [componentItemId], references: [id], onDelete: Cascade) // Cascade delete if component item is deleted? Or restrict? For now, Cascade.

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([billOfMaterialId, componentItemId])
  @@index([companyId])
  @@schema("public")
}

enum ItemType {
  RAW_MATERIAL
  MANUFACTURED_GOOD

  @@schema("public")
}

model Company {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique

  users               User[]
  customers           Customer[]
  orders              Order[]
  invoices            Invoice[]
  inventoryItems      InventoryItem[]
  inventoryCategories InventoryCategory[]
  suppliers           Supplier[]
  billOfMaterials     BillOfMaterial[]
  billOfMaterialItems BillOfMaterialItem[]

  @@schema("public")
}

model Supplier {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  contactInfo String?

  inventoryItems InventoryItem[]

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@schema("public")
}

model InventoryCategory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  inventoryItems InventoryItem[]

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, name])
  @@index([companyId])
  @@schema("public")
}

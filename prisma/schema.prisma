generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public", "auth"]
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  login          String?
  role           UserRole  @default(user)
  isAdmin        Boolean   @default(false)
  accounts       Account[]
  sessions       Session[]

  @@schema("public")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@schema("public")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("public")
}

enum UserRole {
  user
  admin

  @@schema("public")
}

model Allowlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())

  @@schema("public")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@schema("public")
}

enum AddressType {
  billing
  shipping

  @@schema("public")
}

model Address {
  id           String      @id @default(cuid())
  customerId   String
  type         AddressType
  streetAddress String      // Changed from street
  city         String
  postalCode   String
  countryCode  String      // Changed from country
  customer     Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@schema("public")
}

model Customer {
  id                   String    @id @default(cuid())
  name                 String
  email                String?
  phone                String?
  vatId                String? // Y-tunnus in Finland
  ovtIdentifier        String? // Changed from ovtId 
  intermediatorAddress String? // Added for Finvoice
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  addresses            Address[]
  orders               Order[]
  invoices             Invoice[]

  @@schema("public")
}

enum MaterialType {
  raw_material
  manufactured

  @@schema("public")
}

model InventoryItem {
  id                String                 @id @default(cuid())
  sku               String                 @unique
  name              String
  description       String?
  unitOfMeasure     String // Free text field (e.g., 'kpl', 'ltr')
  costPrice         Decimal                @db.Decimal(10, 2)
  salesPrice        Decimal                @db.Decimal(10, 2)
  materialType      MaterialType           @default(raw_material)
  minimumStockLevel Decimal                @default(0) @db.Decimal(10, 2)
  reorderLevel      Decimal                @default(0) @db.Decimal(10, 2)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  transactions      InventoryTransaction[]
  orderItems        OrderItem[]
  invoiceItems      InvoiceItem[]

  @@schema("public")
}

enum TransactionType {
  purchase
  sale
  adjustment

  @@schema("public")
}

model InventoryTransaction {
  id        String          @id @default(cuid())
  itemId    String
  quantity  Decimal         @db.Decimal(10, 2)
  type      TransactionType
  reference String? // Optional reference to order or invoice
  note      String?
  createdAt DateTime        @default(now())
  item      InventoryItem   @relation(fields: [itemId], references: [id])

  @@schema("public")
}

enum OrderStatus {
  draft
  confirmed
  in_production // Changed from picking, packing, ready
  shipped
  delivered
  cancelled

  @@schema("public")
}

model Order {
  id          String      @id @default(cuid())
  customerId  String
  orderNumber String      @unique
  status      OrderStatus @default(draft)
  totalAmount Decimal     @db.Decimal(10, 2)
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  customer    Customer    @relation(fields: [customerId], references: [id])
  items       OrderItem[]
  invoices    Invoice[]

  @@schema("public")
}

model OrderItem {
  id        String        @id @default(cuid())
  orderId   String
  itemId    String
  quantity  Decimal       @db.Decimal(10, 2)
  unitPrice Decimal       @db.Decimal(10, 2)
  order     Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  item      InventoryItem @relation(fields: [itemId], references: [id])

  @@schema("public")
}

enum InvoiceStatus {
  draft
  sent
  paid
  overdue
  cancelled
  credited

  @@schema("public")
}

model Invoice {
  id              String        @id @default(cuid())
  invoiceNumber   String        @unique
  customerId      String
  orderId         String?       // Optional link to originating order
  status          InvoiceStatus @default(draft)
  invoiceDate     DateTime      @default(now()) // Changed from issueDate
  dueDate         DateTime
  totalAmount     Decimal       @db.Decimal(10, 2)
  totalVatAmount  Decimal       @db.Decimal(10, 2) // Changed from vatAmount
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  customer        Customer      @relation(fields: [customerId], references: [id])
  order           Order?        @relation(fields: [orderId], references: [id])
  items           InvoiceItem[]
  payments        Payment[]

  // Credit Note Links
  originalInvoiceId String?             @unique // An invoice can only be credited by one note
  creditNoteId      String?             @unique // A credit note credits only one invoice

  originalInvoice   Invoice? @relation("CreditRelation", fields: [originalInvoiceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  creditNote        Invoice? @relation("CreditRelation") // Relation defined on the other side

  @@schema("public")
}

model InvoiceItem {
  id             String        @id @default(cuid())
  invoiceId      String
  itemId         String        // Link to InventoryItem kept for now
  description    String?       // Description can be separate from item name
  quantity       Decimal       @db.Decimal(10, 2)
  unitPrice      Decimal       @db.Decimal(10, 2)
  vatRatePercent Decimal       @db.Decimal(5, 2) // Changed from vatRate
  invoice        Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  item           InventoryItem @relation(fields: [itemId], references: [id])

  @@schema("public")
}

model Payment {
  id          String   @id @default(cuid())
  invoiceId   String
  amount      Decimal  @db.Decimal(10, 2)
  paymentDate DateTime
  reference   String?
  notes       String?
  createdAt   DateTime @default(now())
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@schema("public")
}

model Settings {
  id                      String  @id @default(cuid())
  companyName             String
  vatId                   String // Y-tunnus
  ovtId                   String? // OVT identifier
  streetAddress           String
  postalCode              String
  city                    String
  country                 String
  phone                   String?
  email                   String?
  bankName                String?
  bankAccountIban         String
  bankSwiftBic            String
  finvoiceIntermediator   String?
  finvoiceIntermediatorId String?

  @@schema("public")
}
